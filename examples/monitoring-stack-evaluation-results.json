{
  "evaluation_prompt": "# PROMPT EVALUATION FRAMEWORK\n\n## EVALUATION OBJECTIVE\nYou are an expert evaluator specializing in infrastructure assessment. Your task is to evaluate the given prompt based on enterprise-grade infrastructure standards.\n\n## EVALUATION CRITERIA\n### INFRASTRUCTURE EVALUATION CRITERIA\n\n**Deployment Automation** (Weight: 25%)\n- Evaluate deployment automation implementation\n- Consider enterprise best practices\n\n**Configuration Management** (Weight: 20%)\n- Evaluate configuration management implementation\n- Consider enterprise best practices\n\n**Monitoring Setup** (Weight: 20%)\n- Evaluate monitoring setup implementation\n- Consider enterprise best practices\n\n**Security Hardening** (Weight: 15%)\n- Evaluate security hardening implementation\n- Consider enterprise best practices\n\n**Backup Strategy** (Weight: 10%)\n- Evaluate backup strategy implementation\n- Consider enterprise best practices\n\n**Disaster Recovery** (Weight: 10%)\n- Evaluate disaster recovery implementation\n- Consider enterprise best practices\n\n\n## SCORING METHODOLOGY\n- Score each criterion from 0.0 to 1.0\n- Provide specific evidence for each score\n- Calculate weighted overall score\n- Minimum acceptable threshold: 0.7\n\n## EVALUATION TARGET\n**Technologies:** docker-compose, prometheus, grafana, victoriametrics, alertmanager, nginx\n**Domain Focus:** infrastructure\n\n## PROMPT TO EVALUATE\n```\n# Generated Prompt\n\n## Configuration\n- **Technologies**: docker-compose\n- **Task Type**: infrastructure deployment\n- **Template**: base_prompts/focused_devops_prompt.txt\n\n## Task Description\nImplement the requested functionality following best practices\n\n## Code Requirements\nStack di monitoraggio completo con Prometheus, Grafana, Alertmanager e VictoriaMetrics. TLS/SSL abilitato con certificati generati automaticamente e supporto per certificati forniti dal cliente. Volume VictoriaMetrics su disco aggiuntivo dedicato /data/victoriametrics. Integrazione LDAP per autenticazione Grafana. Dashboard preconfigurate per monitoring di etcd, Prometheus e Patroni. Configurazione single-node (no HA). Sistema di backup e ripristino automatico dei dati e configurazioni con retention 30 giorni. Rete Docker dedicata 'monitoring_network'. Reverse proxy nginx con SSL termination. Monitoraggio metriche sistema e applicazioni. Alerting configurato con notifiche email e Slack. Alertmanager con routing rules. File di configurazione in ./config/, certificati in ./certs/, backup in ./backups/. Environment variables per credenziali. Health checks e restart policies. Logging centralizzato. Port exposure: Grafana 3000, Prometheus 9090, VictoriaMetrics 8428, Alertmanager 9093.\n\n## Generated Prompt\n\n```\n# DevOps docker-compose Infrastructure\n\n## TASK\nImplement: **Implement the requested functionality following best practices**\n\n## EXPECTED OUTPUT EXAMPLE\n```yaml\n# docker-compose.yml example\nversion: '3.8'\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://user:pass@db:5432/myapp\n    depends_on:\n      db:\n        condition: service_healthy\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  db:\n    image: postgres:14-alpine\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: pass\n      POSTGRES_DB: myapp\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U user\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\nvolumes:\n  postgres_data:\n```\n\n```dockerfile\n# Dockerfile example\nFROM node:16-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM node:16-alpine\nRUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001\nWORKDIR /app\nCOPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules\nCOPY --chown=nextjs:nodejs . .\nUSER nextjs\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n\n## REQUIREMENTS\nStack di monitoraggio completo con Prometheus, Grafana, Alertmanager e VictoriaMetrics. TLS/SSL abilitato con certificati generati automaticamente e supporto per certificati forniti dal cliente. Volume VictoriaMetrics su disco aggiuntivo dedicato /data/victoriametrics. Integrazione LDAP per autenticazione Grafana. Dashboard preconfigurate per monitoring di etcd, Prometheus e Patroni. Configurazione single-node (no HA). Sistema di backup e ripristino automatico dei dati e configurazioni con retention 30 giorni. Rete Docker dedicata 'monitoring_network'. Reverse proxy nginx con SSL termination. Monitoraggio metriche sistema e applicazioni. Alerting configurato con notifiche email e Slack. Alertmanager con routing rules. File di configurazione in ./config/, certificati in ./certs/, backup in ./backups/. Environment variables per credenziali. Health checks e restart policies. Logging centralizzato. Port exposure: Grafana 3000, Prometheus 9090, VictoriaMetrics 8428, Alertmanager 9093.\n\n## IMPLEMENTATION STEPS\n1. **Create Dockerfile** with multi-stage build and security best practices\n2. **Setup docker-compose.yml** with service dependencies and health checks\n3. **Configure environment variables** for different deployment stages\n4. **Add Ansible playbooks** for automated deployment\n5. **Include monitoring setup** (health checks, logging)\n6. **Write deployment scripts** with rollback capabilities\n\n## SUCCESS CRITERIA\n- \u2705 Containers build without errors\n- \u2705 Services start up and pass health checks\n- \u2705 Environment variables properly configured\n- \u2705 Ansible playbook deploys successfully\n- \u2705 Monitoring shows service status\n\n## QUALITY CHECKLIST\nAfter implementation, verify:\n- [ ] Docker images follow security best practices (non-root user)\n- [ ] All services have proper health checks configured\n- [ ] Environment variables don't contain secrets in plain text\n- [ ] Ansible playbooks are idempotent (can run multiple times)\n- [ ] Deployment includes proper backup and rollback procedures\n- [ ] Monitoring covers all critical service metrics\n\nPlease implement step by step, explaining your choices for container orchestration and deployment strategy.\n```\n\n---\n*Generated by Advanced Prompt Engineering CLI*\n```\n\n## REQUIRED OUTPUT FORMAT\n```json\n{\n  \"overall_score\": 0.0,\n  \"domain\": \"infrastructure\",\n  \"criteria_scores\": {\n        \"deployment_automation\": 0.0,\n    \"configuration_management\": 0.0,\n    \"monitoring_setup\": 0.0,\n    \"security_hardening\": 0.0,\n    \"backup_strategy\": 0.0,\n    \"disaster_recovery\": 0.0\n  },\n  \"strengths\": [\"specific strength 1\", \"specific strength 2\"],\n  \"weaknesses\": [\"specific weakness 1\", \"specific weakness 2\"],\n  \"recommendations\": [\"improvement 1\", \"improvement 2\"],\n  \"evidence\": {\n        \"deployment_automation\": \"specific evidence from prompt\",\n    \"configuration_management\": \"specific evidence from prompt\",\n    \"monitoring_setup\": \"specific evidence from prompt\",\n    \"security_hardening\": \"specific evidence from prompt\",\n    \"backup_strategy\": \"specific evidence from prompt\",\n    \"disaster_recovery\": \"specific evidence from prompt\"\n  }\n}\n```\n\n1. **Domain Focus**: Evaluate specifically for infrastructure excellence\n2. **Technology Context**: Consider docker-compose, prometheus, grafana, victoriametrics, alertmanager, nginx specific patterns\n3. **Enterprise Standards**: Apply enterprise-grade infrastructure requirements\n4. **Evidence Required**: Cite specific examples from the prompt\n5. **Scoring Precision**: Use the full 0.0-1.0 range with decimal precision",
  "metadata": {
    "domain": "infrastructure",
    "technologies": [
      "docker-compose",
      "prometheus",
      "grafana",
      "victoriametrics",
      "alertmanager",
      "nginx"
    ],
    "criteria_count": 6,
    "confidence_score": 0.9,
    "generated_at": "2025-07-01T13:44:14.918300"
  },
  "instructions": "1. **Domain Focus**: Evaluate specifically for infrastructure excellence\n2. **Technology Context**: Consider docker-compose, prometheus, grafana, victoriametrics, alertmanager, nginx specific patterns\n3. **Enterprise Standards**: Apply enterprise-grade infrastructure requirements\n4. **Evidence Required**: Cite specific examples from the prompt\n5. **Scoring Precision**: Use the full 0.0-1.0 range with decimal precision",
  "scoring_rubric": {
    "scoring_scale": {
      "0.9-1.0": "Excellent - Exceeds enterprise standards",
      "0.8-0.89": "Good - Meets enterprise standards",
      "0.7-0.79": "Acceptable - Minor improvements needed",
      "0.6-0.69": "Conditional - Significant improvements required",
      "0.0-0.59": "Inadequate - Major revisions required"
    },
    "weighted_calculation": "Sum of (criterion_score * weight) for all criteria",
    "min_threshold": 0.7,
    "pass_criteria": "Overall score >= 0.7 AND no criterion < 0.5"
  }
}