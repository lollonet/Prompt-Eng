# Docker Compose Monitoring Stack

## TASK
Implement: **{{task_description}}**

## MONITORING STACK COMPONENTS
- **Prometheus**: Metrics collection and alerting engine
- **Grafana**: Visualization and dashboards with LDAP authentication
- **VictoriaMetrics**: High-performance time series database
- **Alertmanager**: Alert management and routing
- **Nginx**: Reverse proxy with TLS/SSL termination

## EXPECTED OUTPUT STRUCTURE

### docker-compose.yml
```yaml
version: '3.8'

networks:
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

services:
  # Nginx Reverse Proxy with SSL Termination
  nginx:
    image: nginx:alpine
    container_name: monitoring-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    networks:
      - monitoring_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VictoriaMetrics - Time Series Database
  victoriametrics:
    image: victoriametrics/victoria-metrics:latest
    container_name: monitoring-victoriametrics
    ports:
      - "8428:8428"
    volumes:
      - /data/victoriametrics:/victoria-metrics-data
    command:
      - '--storageDataPath=/victoria-metrics-data'
      - '--retentionPeriod=60d'
    networks:
      - monitoring_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8428/health"]

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - monitoring_network
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: monitoring-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_AUTH_LDAP_ENABLED=true
    networks:
      - monitoring_network
    restart: unless-stopped

  # Alertmanager - Alert Management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: monitoring-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager:/etc/alertmanager:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring_network
    restart: unless-stopped
```

### Configuration Structure
```
monitoring-stack/
├── docker-compose.yml
├── .env
├── config/
│   ├── prometheus/
│   │   ├── prometheus.yml
│   │   └── rules/
│   ├── grafana/
│   │   ├── grafana.ini
│   │   ├── ldap.toml
│   │   └── dashboards/
│   ├── alertmanager/
│   │   └── alertmanager.yml
│   └── nginx/
│       └── nginx.conf
├── certs/
│   ├── auto-generated/
│   └── customer-provided/
└── backups/
    └── scripts/
```

## REQUIREMENTS
{{requirements}}

## IMPLEMENTATION CHECKLIST

### 🔒 Security Requirements
- [ ] TLS 1.3 encryption enabled
- [ ] Auto-generated certificates setup
- [ ] Customer-provided certificate support
- [ ] LDAP authentication for Grafana
- [ ] Nginx security headers
- [ ] Non-root container users
- [ ] Environment variables for secrets

### 📊 Monitoring Requirements  
- [ ] Prometheus metrics collection
- [ ] VictoriaMetrics high-performance storage
- [ ] Grafana visualization dashboards
- [ ] Pre-configured dashboards for etcd, Prometheus, Patroni
- [ ] Alertmanager routing rules
- [ ] Email and Slack alerting integration

### 🚀 Infrastructure Requirements
- [ ] Dedicated Docker network 'monitoring_network'
- [ ] VictoriaMetrics volume on additional disk /data/victoriametrics
- [ ] Health checks for all services
- [ ] Restart policies configured
- [ ] Centralized logging with retention
- [ ] Port exposure: Grafana 3000, Prometheus 9090, VictoriaMetrics 8428, Alertmanager 9093

### 💾 Backup & Recovery Requirements
- [ ] Automated backup system with 30-day retention
- [ ] Backup scripts for all components
- [ ] Restore procedures documented
- [ ] Configuration backup included
- [ ] Data persistence volumes

### ⚙️ Configuration Management
- [ ] Environment variables in .env file
- [ ] Configuration files in ./config/
- [ ] Certificates in ./certs/
- [ ] Backup scripts in ./backups/
- [ ] LDAP integration configured
- [ ] SSL termination at nginx

## BEST PRACTICES TO FOLLOW
{{best_practices}}

## TOOLS AND QUALITY
{{tools}}

## SUCCESS CRITERIA
- ✅ All monitoring services start successfully
- ✅ TLS/SSL certificates working (auto-generated and custom)
- ✅ LDAP authentication functional in Grafana
- ✅ Metrics flowing: Prometheus → VictoriaMetrics
- ✅ Dashboards accessible and displaying data
- ✅ Alerting rules active and notifications working
- ✅ Backup system operational with scheduled runs
- ✅ Health checks passing for all services
- ✅ Single-node deployment ready for production

## ENTERPRISE VALIDATION
After implementation verify:
- [ ] Infrastructure follows enterprise patterns
- [ ] Security hardening implemented
- [ ] Monitoring covers all critical metrics  
- [ ] Backup strategy meets retention requirements
- [ ] Disaster recovery procedures documented
- [ ] Configuration management follows best practices

Implement step by step with complete configurations for production-ready monitoring stack.